NOTES ABOUT COURSE:
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
¿Qué es Spring y qué usaremos de Spring?
Spring es el framework más usado de Java.
Nos ofrece herramientas que nos permite crear proyectos más avanzados, con mejores prácticas y en menor tiempo. 
También posee una gran comunidad, lo que nos brinda muchísima documentación y ayuda.

Spring tiene una estructura modular y flexible, lo que nos hace usar solo lo que necesitemos.

Vamos a usar 4 subproyectos de Sping:

Spring Framework: 
Permite crear aplicaciones empresariales. Es transversal, ya que todos lo usan.
Spring Boot: 
Con el que podemos crear aplicaciones autocontenidas y autoconfigurables.
Spring Data: 
Gestionar e integrar bases de datos.
Spring Security: 
Gestionar la seguridad de la aplicación.
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
¿Qué es una aplicación autocontenida?
[IMG - 'i1-app-autocontenida.png'] (La arquitectura paso de ser todas contenidas en un solo servidor a ser autocontenidas (es decir cada aplicacion tiene su propio servidor))

Las arquitecturas modernas se basan de acuerdo a una aplicacion autocontenida
Cada aplicación internamente contiene su servidor de aplicaciones con su configuración totalmente independiente una de la otra en lugar de todas las aplicaciones centralizadas en un solo servidor

Spring Boot
Es el proyecto de Spring para aplicaciones autocontenidas
Olvidarnos de la infraestructura y centrarnos en el desarrollo
Puede funcionar con Tomcat (por defecto), Jetty o Undertow.
Incluye gestión de dependencias iniciales, configuración automática y más
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
Crear nuestra primera aplicación con Spring Initializr

¿Qué es Spring Initializr?
https://start.spring.io/

Sitio oficial para generar un proyecto de Spring Boot
En poco tiempo y a nuestra medida
Con todo lo que necesitamos para empezar

MY INITIAL PROJECT:
Project
+Gradle - Groovy
Language
+Java
Spring Boot
+2.7.11

Project Metadata
Group
+com.gira
Artifact
+gira-market
Name
+gira-market
Description
+Project for start an API in Spring with Platzi.
Package name
+com.gira.gira-market
Packaging
+Jar
Java
+11
Dependencies
+Spring Web

About Project:

Los projectos Maven gestionan las dependencias con archivos XML

Los archivos Gradle son escritos en Groovy y permite crear tareas que se pueden ejecutar al momento de hacer despliegue o integración continua

Utilizar la version estable de spring boot y llenar los metadatos

Spring Web: 
permite genera APIs rest utilizando Apache Tomcat como servidor por defecto

build.gradle: 
Es donde está escrita toda la configuración del proyecto (plugins, version de Java, dependencias, software para pruebas etc.)

Carpeta Gradle: Archivos necesarios para que gradle funcione

@SpringBootApplication: indica la clase que gestiona la aplicación
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
Hola Mundo con Spring Boot

-> UnZip the project and open your IDE!

-> Open your project in your IDE!

-> Create your controller! (the controller is the class that will manage the requests)

-> Run the project!
>>> cd gira-market
>>> sh gradlew buid
>>> cd build/libs
>>> java -jar gira-market-0.0.1-SNAPSHOT.jar

-> Test your API!
>>> curl localhost:8080/gira/hola

or, more easy:
>>> sh gradlew bootRun //this command will run the project and will be listening for changes(only in development)
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
Configurar Spring Boot

Propiedades de la Aplicación

application.properties

+Configurar un nuevo puerto
Posibilidad de añadir propiedades propias
		server.port=8090
		server.servlet.context-path=/gira-market/api

>>> curl localhost:8090/gira-market/api/gira/hola 

+Gestión de perfiles según el tipo de despliegue
++Se puede utilizar para desplegar perfiles para dev y para prod

Ser gestionado para varios entornos
Es muy importante seguir el patron de nombramiento

APP.PROPIERTIES (ES EL ARCHIVO POR DEFECTO Y ORQUESTA TODOS LOS DEMAS ARCHIVOS DE PROPIEDADES)
spring.profiles.active=dev //indica que el perfil activo es dev (respeta el patron de nombramiento)

TODO LO QUE ESTA EN APP.PROPERTIES SE PUEDE SOBREESCRIBIR EN APP-DEV.PROPERTIES O APP-PROD.PROPERTIES
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
Crear la Estructura del Proyecto
[IMG - 'i2-estructura-proyecto.png'] (El proyecto se divide en 3 capas: Web, Dominio y Persistencia)

1. DOMINIO:
DTO y objetos del dominio (Contexto de la aplicación)
Servicios: Puente entre los controladores y la capa de persistencia.
Especificación de repositorios: Interfaces que determinan las reglas que debe cumplir la persistencia para actuar entre los objetos de dominio y la DB.

2. WEB:
Controladores de API Rest.

3. PERSISTENCIA:
Repositorios: Implementan las especificaciones que tiene la capa de DOMINIO.
Entities: Mapean y actúan como tablas de la DB.

+Create the packages:
>>> cd src/main/java/com/gira/gira-market
>>> mkdir -p domain/{dto,repository,service} persistance/{entity,crud} web/controller
(El comando mkdir -p crea la carpeta y todas las subcarpetas necesarias) 
The structure of the project is:
|-- src
|   |-- main
|   |   |-- java
|   |   |   |-- com
|   |   |   |   |-- gira
|   |   |   |   |   |-- gira-market
|	|	|	|	|	|	GiraMarketApplication.java
|   |   |   |   |   |   |-- domain
|   |   |   |   |   |   |   |-- dto
|   |   |   |   |   |   |   |-- repository
|   |   |   |   |   |   |   |-- service
|   |   |   |   |   |   |-- persistance
|   |   |   |   |   |   |   |-- crud
|   |   |   |   |   |   |   |-- entity
|   |   |   |   |   |   |-- web
|   |   |   |   |   |   |   |-- controller
|   |   |   |   |   |   |   | 	HolaMundoController.java
|   |   |-- resources
...
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
¿Qué es JPA? (Java Persistence API)
Jpa es una especificación de Java, standar, para un framework ORM. 
Quiere decir que son una serie de reglas que Java define para que cualquier framework que quiera interactura con la BD de Java, tenga que seguir.

Los frameworks mas populares de Java para este fin son:
-Hibernate
-TopLink
-EclipseLink
-ObjectDB

Anotaciones JPA
JPA utiliza anotaciones para conectar clases a tablas de la BD y asi evitar hacerlo de manera nativa con SQL.

@Entity.
Indica a una clase de java que esta representando una tabla de nuestra BD.

@Table.
Recibe el nombre de la tabla a la cual esta mapeando la clase.

@column.
Se le pone a los atributos de la clase, no es obligatoria, se indica sólo cuando el nombre de la columna es diferente al nombre del atributo de la tabla.

@id & @EmbededID. 
Es el atributo como clave primaria de la tabla dentro de la clase. @id se utiliza cuando es clave primaria sencilla 
y @EmbededID cuando es una clave primaria compuesta.

@GeneratedValue.
Permite generar automáticamente generar valores para las clases primarias en nuestras clases

@OneToMany & @MatyToOne. Representar relaciones
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
¿Qué es Spring Data?
Spring Data NO es una implementacion de JPA, 
sino más bien es un proyecto que usa JPA para ofrecer funcionalidades extra en la gestion de tareas desde JAVA a las base de datos.

Spring Data internamente tiene varios subproyectos, entre ellos: 
Spring Data JPA y Spring Data JDBC, para conectarnos a BD relacionales (SQL). 
Spring Data MongoDB y Spring Data Cassandra, son proyectos para conectarnos a BD no relacionales.

La tarea principal de Spring Data es optimizar tareas repitivas.

Spring data nos provee de respositorios sin codigo, nos permiten hacer todo tipo de operaciones en BD (CRUD) sin utilizar una linea de código.

También nos provee de auditorías transparentes, por ello, posee un motor de auditorias que nos permite saber cuadno se insertó un registro, cuando se borró, cuando se actualizo en la BD, etc.
---
CÓMO IMPLEMENTAR SPRING DATA JPA IN NUESTRO PROYECTO?

https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
Se copia el group y el name en las dependencias del archivo build.gradle:
dependencies {
    //Dependencia agregada
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	...
}
-> RERUN THE PROJECT (va a descargar las dependencias y fallar hasta que se agregue la configuración de la BD, dont worry!)
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
CREATE THE DATABASE IN PSQL

CREATE DATABASE giramarket;

#CREATE SCHEMA!
sudo psql -U postgres -f schema.sql -d giramarket

#CREATE DATA!
sudo psql -U postgres -f data.sql -d giramarket

---> ---> ---> ---> ---> ---> ---> ---> ---> --->
MAPEAR TABLAS CON CLASES (ENTITIES)

Cuidado con el PK compuesta! (EmbededId) 
Se crea su propia clase y se anota con @EmbededId!
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
MAPEAR RELACIONES ENTRE CLASES (RELACIONES ENTRE TABLAS)

---> ---> ---> ---> ---> ---> ---> ---> ---> --->
JPA REPOSITORIOS (CRUD) | INTERFACE CRUD REPOSITORY

Spring Data Repositories
+Ahorra tiempo de desarrollo e implementación
+Permite operaciones CRUD sin escribir código

3 tipos de repositorios:
CrudRepository: 
realizar el crud

PagingAndSortingRepository: 
incluye lo de Crud repository ademas de paginación y ordenamiento.

JPARepository: 
ademas de tener CrudRepository y PagingAndSortingRepository nos permite tareas específicas como Flush (combinar y guardar en memoria los cambios en la BD) y Batch (guardar en la BD en lotes)???

---> ---> ---> ---> ---> ---> ---> ---> ---> --->
QUERY METHODS!

+Permite crear consultas personalizadas sin escribir código SQL
+Proveen la generación de consultas mediante métodos
+Tienen la posibilidad de retornar Optional<T> para evitar nullPointerException

IN SQL 
SELECT * FROM productos WHERE id_categoria = ? ORDER BY nombre ASC; 

IN QUERY METHODS
findByCategoriaIdOrderByNombreAsc(int categoriaId);???


---> ---> ---> ---> ---> ---> ---> ---> ---> --->
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
---> ---> ---> ---> ---> ---> ---> ---> ---> --->
---> ---> ---> ---> ---> ---> ---> ---> ---> --->

